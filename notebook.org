#+title: Dataset Similarities
#+property: header-args :session dataset-sims :kernel dataset-sims :async yes

* Imports

#+begin_src jupyter-python
  import numpy as np
  import networkx as nx
  from sklearn.manifold import TSNE
  import matplotlib.pyplot as plt
  from mpl_toolkits.mplot3d import Axes3D
#+end_src

#+RESULTS:

* Load matrix

#+begin_src jupyter-python
  sim_matrix = np.load('sims.npy')
#+end_src

#+RESULTS:

* Histogram

#+begin_src jupyter-python
  # Flatten the matrix and remove self-similarities (diagonal elements)
  similarities = sim_matrix[~np.eye(sim_matrix.shape[0], dtype=bool)].flatten()

  # Create the histogram
  plt.figure(figsize=(10, 6))
  plt.hist(similarities, bins=50, edgecolor='black')
  plt.title('Histogram of Image Similarities')
  plt.xlabel('Sim')
  plt.ylabel('Frequency')

  # Add vertical line for mean
  mean_sim = np.mean(similarities)
  plt.axvline(mean_sim, color='r', linestyle='dashed', linewidth=2, label=f'Mean: {mean_sim:.3f}')

  # Add vertical line for median
  median_sim = np.median(similarities)
  plt.axvline(median_sim, color='g', linestyle='dashed', linewidth=2, label=f'Median: {median_sim:.3f}')

  plt.legend()
  plt.tight_layout()
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/cbbb0713dd4e530dca607faf77f4a3ac833d27e7.png]]

* Graph

#+begin_src jupyter-python
  # Maybe use datasets for initialising
  tsne = TSNE(n_components=2, perplexity=10, random_state=6969, early_exaggeration=36)
  embedded = tsne.fit_transform(sim_matrix)

#+end_src

#+RESULTS:

* Plot

** Plot 3D

#+begin_src jupyter-python
  fig = plt.figure(figsize=(10, 10))
  ax = fig.add_subplot(111, projection='3d')
  ax.scatter(embedded[:, 0], embedded[:, 1], embedded[:, 2], s=10)
  ax.set_xlabel('t-SNE Dimension 1')
  ax.set_ylabel('t-SNE Dimension 2')
  ax.set_zlabel('t-SNE Dimension 3')
  ax.set_title('3D t-SNE Visualization of Image Similarities')
  plt.show()

#+end_src

#+RESULTS:
[[file:./.ob-jupyter/c3d5cf23014539eb63ed7c57047172472d1843c6.png]]


** Plot 2D

#+begin_src jupyter-python
  num_images = len(sim_matrix)
  labels = np.arange(num_images)  # Assign a unique label to each image

  # Create a color map
  cmap = plt.cm.get_cmap('viridis', num_images)

  plt.figure(figsize=(10,10))
  plt.scatter(embedded[:,0], embedded[:,1], s=10, c=labels, cmap=cmap)
  plt.xlabel("t-SNE Dimension 1")
  plt.ylabel("t-SNE Dimension 2")
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: /tmp/ipykernel_235521/1552927947.py:5: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed in 3.11. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap()`` or ``pyplot.get_cmap()`` instead.
:   cmap = plt.cm.get_cmap('viridis', num_images)
[[file:./.ob-jupyter/d68dd9763665d27d332bec6ccab1cf0b95ae921e.png]]
:END:
